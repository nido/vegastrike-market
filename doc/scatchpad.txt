	element = scew_element_add(root, "totalproduction");
	scew_element_set_contents(element, sprintf("%f",totalproduction));

	element = scew_element_add(root, "options");
	//for each option
	for(vector<ProductionOption>::const_iterator itr =  options.begin(); itr != options.end(); ++itr){
		(*itr).addElement(element);
	}

	element = scew_element_add(root, "initialcapital");
	scew_element_set_contents(element, sprintf("%f",initialcapital));

	element = scew_element_add(root, "capital");
	scew_element_set_contents(element, sprintf("%f",capital));

	element = scew_element_add(root, "dividends");
	scew_element_set_contents(element, sprintf("%f",dividends));

	element = scew_element_add(root, "rateofreturn");
	scew_element_set_contents(element, sprintf("%f",rateofreturn));

	element = scew_element_add(root, "reserves");
	//for each reserve
	for(map<string,Reserve>::const_iterator itr =  reserve.begin(); itr != reserve.end(); ++itr){
		sub_element = scew_element_add(element, "reserve");
	        scew_element_add_attr_pair(sub_element, "name", (*itr).first);
		(*itr).second.addElement(sub_element);
	}
====

	string currencyName;
	string populaceName;

	std::map <string,Market*> markets;

	std::map <string,Factory*> factories;

	std::map <string,Consumer*> consumers;

	std::map <string,string> consumerMap;
